//-------------------------------------------------------------------------
//    doodler.sv                                                            --
//    based on the ball.sv provided in lab6
//    edited by JS and CC
//    used for ECE 385fFA22 final project
//-------------------------------------------------------------------------


module  doodler ( input Clk,Reset, frame_clk,
                  input [9:0] DrawX, DrawY,
					   input [7:0] keycode,
						input logic [1:0] doodler_state,
						output logic is_doodler,
                  output [9:0]  BallX, BallY, BallS, Ball_Y_Step_out); 
   
    logic [9:0] Ball_X_Pos, Ball_X_Motion, Ball_Y_Pos, Ball_Y_Motion;//, Ball_Size;
	logic [9:0] Ball_X_Step, Ball_Y_Step;
	 
    parameter [9:0] Ball_X_Center=320;  // Center position on the X axis
    parameter [9:0] Ball_Y_Center=240;  // Center position on the Y axis
    parameter [9:0] Ball_X_Min=170;       // Leftmost point on the X axis
    parameter [9:0] Ball_X_Max=469;     // Rightmost point on the X axis
    parameter [9:0] Ball_Y_Min=0;       // Topmost point on the Y axis
    parameter [9:0] Ball_Y_Max=479;     // Bottommost point on the Y axis
    //parameter [9:0] Ball_X_Step=3;      // Step size on the X axis
    //parameter [9:0] Ball_Y_Step=3;      // Step size on the Y axis
	 parameter [9:0] doodler_size = 10'd35;
	 parameter [9:0] shooting_doodler_size = 10'd39;
	 

    //assign Ball_Size = 4;  // assigns the value 4 as a 10-digit binary number, ie "0000000100"
   
    always_ff @ (posedge Reset or posedge frame_clk )
    begin: Move_Ball
        if (Reset)  // Asynchronous Rese
        begin 
				
                Ball_Y_Motion <= 10d'0; //Ball_Y_Step;
				Ball_X_Motion <= 10d'0; //Ball_X_Step;
				Ball_Y_Pos <= Ball_Y_Center;
				Ball_X_Pos <= Ball_X_Center;
        end
           
        else 
        begin 
				 //if ( (Ball_Y_Pos + Ball_Size) >= Ball_Y_Max && keycode == 8'h16)  // Ball is at the bottom edge, BOUNCE!
					  
					      //Ball_Y_Motion <= 0;  // 2's complement.
					  
				 //else if ( (Ball_Y_Pos - Ball_Size) <= Ball_Y_Min && keycode == 8'h1A)  // Ball is at the top edge, BOUNCE!
						
						   //Ball_Y_Motion <= 0;
					  
				 //if ( (Ball_X_Pos - Ball_Size) >= Ball_X_Max && keycode == 8'h07)  // Ball is at the Right edge, BOUNCE!

							//Ball_X_Motion <= 10'd2; // 2's complement.
				
					  
				 //else if ( (Ball_X_Pos + Ball_Size) <= Ball_X_Min && keycode == 8'h04 )  // Ball is at the Left edge, BOUNCE!
					  
							//Ball_X_Motion <= (~ (10'd2) + 1'b1);
				
				 //if ( (Ball_Y_Pos + Ball_Size) >= Ball_Y_Max)  // Ball is at the bottom edge, BOUNCE!
					  
					      //Ball_Y_Motion <= (~10'd4+1'b1);  // 2's complement.
					  
				 //else if ( (Ball_Y_Pos - Ball_Size) <= Ball_Y_Min)  // Ball is at the top edge, BOUNCE!
					  
					      //Ball_Y_Motion <= 10'd4;
					  
				 //if ( (Ball_X_Pos - Ball_Size) >= Ball_X_Max)  // Ball is at the Right edge, BOUNCE!

							//Ball_X_Motion <= 10'd2; // 2's complement.
				
					  
				 //else if ( (Ball_X_Pos + Ball_Size) <= Ball_X_Min)  // Ball is at the Left edge, BOUNCE!
					  
							//Ball_X_Motion <= (~ (10'd2) + 1'b1);
							
					 
				 //else 
						//begin
							Ball_Y_Motion <= Ball_Y_Motion;  // Ball is somewhere in the middle, don't bounce, just keep moving
							Ball_X_Motion <= Ball_X_Motion;
						
		
							case (keycode)
					
							8'h04 : begin
								if ( 385==385 ) 
									Ball_X_Motion <= (~(10'd2)+10'd1);//A
								else
									Ball_X_Motion <= 0;
							   end
					        
							8'h07 : begin
								if ( 385==385 )
									Ball_X_Motion <= 10'd2;//D
								else
									Ball_X_Motion <= 0;
							   end 
							default ï¼š
								begin
									Ball_X_Motion <= 10'b0;
									Ball_Y_Motion <= 10'b0;
								end 
							  
							endcase
						
				
				
				
			// update ball position 
				 if (Ball_X_Pos >= (Ball_X_Max + (doodler_size-1)/2))
					begin
						Ball_Y_Pos <= (Ball_Y_Pos + Ball_Y_Motion);
						Ball_X_Pos <= (Ball_X_Min - (doodler_size-1)/2 + Ball_X_Motion); // from right to left
					end
				 else if (Ball_X_Pos <= (Ball_X_Min - (doodler_size-1)/2))
					begin
						Ball_Y_Pos <= (Ball_Y_Pos + Ball_Y_Motion);
						Ball_X_Pos <= (Ball_X_Max + (doodler_size-1)/2 + Ball_X_Motion); // from left to right
					end
				 else
					begin
						Ball_Y_Pos <= (Ball_Y_Pos + Ball_Y_Motion);  // Update ball position
						Ball_X_Pos <= (Ball_X_Pos + Ball_X_Motion);
					end
		end
	  /**************************************************************************************
	    ATTENTION! Please answer the following quesiton in your lab report! Points will be allocated for the answers!
		 Hidden Question #2/2:
          Note that Ball_Y_Motion in the above statement may have been changed at the same clock edge
          that is causing the assignment of Ball_Y_pos.  Will the new value of Ball_Y_Motion be used,
          or the old?  How will this impact behavior of the ball during a bounce, and how might that 
          interact with a response to a keypress?  Can you fix it?  Give an answer in your Post-Lab.
      **************************************************************************************/
      
			
		end  

	 
	 
	 //////////// is doodler //////////////
	 int hf_size; // doodler size
	 int hf_s_size; // shooting size
	 int dis_dx, dis_dy;
	 
	 assign dis_dx = DrawX - Ball_X_Pos;
	 assign dis_dy = DrawY - Ball_Y_Pos;
	 assign hf_size = (doodler_size-1)/2;
	 assign hf_s_size = (shooting_doodler_size-1)/2;
	 
	 always_comb
		begin
			case (doodler_state)
			2'b00:
				if ((dis_dx >= -hf_size && dis_dx <= hf_size) && 
				    (dis_dy >= -hf_size && dis_dy <= hf_size))
					is_doodler = 1'b1;
				else
					is_doodler =1'b0;
					
			2'b01:
				if ((dis_dx >= -hf_size && dis_dx <= hf_size) && 
				    (dis_dy >= -hf_size && dis_dy <= hf_size))
					is_doodler = 1'b1;
				else
					is_doodler =1'b0;
					
			2'b10:
				if ((dis_dx >= -hf_size && dis_dx <= hf_size) && 
				    (dis_dy >= -hf_s_size && dis_dy <= hf_s_size))
					is_doodler = 1'b1;
				else
					is_doodler =1'b0;
			default: 
					is_doodler =1'b0;
			
		endcase
		end
	 
	 
    ////////////// output ////////////////  
    assign BallX = Ball_X_Pos;
   
    assign BallY = Ball_Y_Pos;
   
    assign BallS = doodler_size/2;
	 
	 assign Ball_Y_Step_out = Ball_Y_Step; // add for gm???
    

endmodule


















